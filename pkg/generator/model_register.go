package generator

import (
	"fmt"
	"io/fs"
	"path/filepath"
	"strings"

	"github.com/hashicorp/go-hclog"
	"github.com/sev-2/raiden/pkg/logger"
	"github.com/sev-2/raiden/pkg/utils"
)

var ModelRegisterLogger hclog.Logger = logger.HcLog().Named("generator.model_register")

// ----- Define type, variable and constant -----
type (
	GenerateRegisterModelData struct {
		Imports []string
		Package string
		Models  []string
	}
)

const (
	ModelRegisterFilename = "models.go"
	ModelRegisterDir      = "internal/bootstrap"
	ModelRegisterTemplate = `// Code generated by raiden-cli; DO NOT EDIT.
package {{ .Package }}
{{if gt (len .Imports) 0 }}
import (
{{- range .Imports}}
	{{.}}
{{- end}}
)
{{end }}
func RegisterModels() {
	resource.RegisterModels(
		{{- range .Models}}
		&models.{{.}}{},
		{{- end}}
	)
}
`
)

func GenerateModelRegister(basePath string, projectName string, generateFn GenerateFn) error {
	modelRegisterDir := filepath.Join(basePath, ModelRegisterDir)
	ModelRegisterLogger.Trace("create bootstrap folder if not exist", "path", modelRegisterDir)
	if exist := utils.IsFolderExists(modelRegisterDir); !exist {
		if err := utils.CreateFolder(modelRegisterDir); err != nil {
			return err
		}
	}

	modelDir := filepath.Join(basePath, ModelDir)
	ModelRegisterLogger.Trace("create models folder if not exist", modelDir)
	if exist := utils.IsFolderExists(modelDir); !exist {
		if err := utils.CreateFolder(modelDir); err != nil {
			return err
		}
	}

	// scan all controller
	modelList, err := WalkScanModel(modelDir)
	if err != nil {
		return err
	}

	input, err := createModelRegisterInput(projectName, modelRegisterDir, modelList)
	if err != nil {
		return err
	}

	writer := &FileWriter{FilePath: input.OutputPath}

	ModelRegisterLogger.Debug("generate model register", "path", input.OutputPath)
	return generateFn(input, writer)
}

func createModelRegisterInput(projectName string, modelRegisterDir string, modelList []string) (input GenerateInput, err error) {
	// set file path
	filePath := filepath.Join(modelRegisterDir, ModelRegisterFilename)

	// set imports path
	imports := []string{
		fmt.Sprintf("%q", "github.com/sev-2/raiden/pkg/resource"),
	}

	if len(modelList) > 0 {
		rolesImportPath := fmt.Sprintf("%s/internal/models", utils.ToGoModuleName(projectName))
		imports = append(imports, fmt.Sprintf("%q", rolesImportPath))
	}

	// set passed parameter
	data := GenerateRegisterModelData{
		Package: "bootstrap",
		Imports: imports,
		Models:  modelList,
	}

	input = GenerateInput{
		BindData:     data,
		Template:     ModelRegisterTemplate,
		TemplateName: "modelRegisterTemplate",
		OutputPath:   filePath,
	}

	return
}

func WalkScanModel(modelDir string) ([]string, error) {
	ModelRegisterLogger.Trace("scan registered all models", "path", modelDir)

	roles := make([]string, 0)
	err := filepath.Walk(modelDir, func(path string, info fs.FileInfo, err error) error {
		if strings.HasSuffix(path, ".go") {
			ModelRegisterLogger.Trace("collect model", "file-path", path)
			rs, e := getStructByBaseName(path, "ModelBase")
			if e != nil {
				return e
			}

			roles = append(roles, rs...)

		}
		return nil
	})
	if err != nil {
		return nil, err
	}

	return roles, nil
}
