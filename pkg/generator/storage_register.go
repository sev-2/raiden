package generator

import (
	"fmt"
	"io/fs"
	"path/filepath"
	"strings"

	"github.com/hashicorp/go-hclog"
	"github.com/sev-2/raiden/pkg/logger"
	"github.com/sev-2/raiden/pkg/utils"
)

var StorageRegisterLogger hclog.Logger = logger.HcLog().Named("generator.storage_register")

// ----- Define type, variable and constant -----
type (
	GenerateRegisterStorageData struct {
		Imports  []string
		Package  string
		Storages []string
	}
)

const (
	StorageRegisterFilename = "storages.go"
	StorageRegisterDir      = "internal/bootstrap"
	StorageRegisterTemplate = `// Code generated by raiden-cli; DO NOT EDIT.
package {{ .Package }}

{{if gt (len .Imports) 0 }}
import (
{{- range .Imports}}
	{{.}}
{{- end}}
)
{{end}}
func RegisterStorages() {
	resource.RegisterStorages(
		{{- range .Storages}}
		&storages.{{.}}{},
		{{- end}}
	)
}
`
)

func GenerateStoragesRegister(basePath string, projectName string, generateFn GenerateFn) error {
	storageRegisterDir := filepath.Join(basePath, StorageRegisterDir)
	StorageRegisterLogger.Trace("create bootstrap folder if not exist", "path", storageRegisterDir)
	if exist := utils.IsFolderExists(storageRegisterDir); !exist {
		if err := utils.CreateFolder(storageRegisterDir); err != nil {
			return err
		}
	}

	storageDir := filepath.Join(basePath, StorageDir)
	StorageRegisterLogger.Trace("create storages folder if not exist", "path", storageDir)
	if exist := utils.IsFolderExists(storageDir); !exist {
		if err := utils.CreateFolder(storageDir); err != nil {
			return err
		}
	}

	// scan all storage
	storageList, err := WalkScanStorage(storageDir)
	if err != nil {
		return err
	}

	input, err := createStorageRegisterInput(projectName, storageRegisterDir, storageList)
	if err != nil {
		return err
	}

	// setup writer
	writer := &FileWriter{FilePath: input.OutputPath}

	StorageRegisterLogger.Debug("generate storage register", "path", input.OutputPath)
	return generateFn(input, writer)
}

func createStorageRegisterInput(projectName string, storageRegisterDir string, storageList []string) (input GenerateInput, err error) {
	// set file path
	filePath := filepath.Join(storageRegisterDir, StorageRegisterFilename)

	// set imports path
	imports := []string{
		fmt.Sprintf("%q", "github.com/sev-2/raiden/pkg/resource"),
	}

	if len(storageList) > 0 {
		rolesImportPath := fmt.Sprintf("%s/internal/storages", utils.ToGoModuleName(projectName))
		imports = append(imports, fmt.Sprintf("%q", rolesImportPath))
	}

	// set passed parameter
	data := GenerateRegisterStorageData{
		Package:  "bootstrap",
		Imports:  imports,
		Storages: storageList,
	}

	input = GenerateInput{
		BindData:     data,
		Template:     StorageRegisterTemplate,
		TemplateName: "storageRegisterTemplate",
		OutputPath:   filePath,
	}

	return
}

func WalkScanStorage(storageDir string) ([]string, error) {
	StorageRegisterLogger.Trace("scan all storages", "path", storageDir)

	storages := make([]string, 0)
	err := filepath.Walk(storageDir, func(path string, info fs.FileInfo, err error) error {
		if strings.HasSuffix(path, ".go") {
			StorageRegisterLogger.Trace("collect storages", "path", path)
			rs, e := getStructByBaseName(path, "BucketBase")
			if e != nil {
				return e
			}

			storages = append(storages, rs...)

		}
		return nil
	})
	if err != nil {
		return nil, err
	}

	return storages, nil
}
